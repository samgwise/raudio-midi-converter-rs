# Prevent binary audio files
*.wav

# Rust/Cargo build artifacts
/target/
**/target/
Cargo.lock

# Generated by Cargo - will have compiled files and executables
debug/
target/

# Remove Cargo.lock from gitignore if creating an executable, leave it for libraries
# More information here https://doc.rust-lang.org/cargo/guide/cargo-toml-vs-cargo-lock.html
# Cargo.lock

# These are backup files generated by rustfmt
**/*.rs.bk

# WASM build outputs
www/pkg/
**/pkg/
*.wasm

# Node.js dependencies (if using npm/yarn for web development)
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Generated MIDI files (you may want to keep some as examples)
*.mid
*.midi
# Keep example files if needed
!bell-miner.mid

# IDE and editor files
.vscode/
.idea/
*.swp
*.swo
*~

# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Windows
desktop.ini

# Temporary files
*.tmp
*.temp
*.log

# Rust analyzer cache
.rust-analyzer/

# Coverage reports
tarpaulin-report.html
lcov.info
coverage/

# Benchmark results
criterion/

# Documentation build
book/
docs/

# Environment files
.env
.env.local

# Test artifacts
test-results/
*.profraw

# Local configuration files
.cargo/config.toml

# Backup files
*.bak
*.orig

# Generated files from build scripts
build/
dist/

# wasm-pack generated files
.wasm-pack-cache/

# Local web server files
*.pid
*.seed
*.cover

# Dependency directories
jspm_packages/

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Local Netlify folder
.netlify
